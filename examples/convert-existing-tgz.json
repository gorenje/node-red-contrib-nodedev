[{"id":"d1c0180fed82252c","type":"group","z":"b92be5062203ff69","name":"import existing tgz and transform them into PkgFiles","style":{"label":true},"nodes":["a9147df404c8a27b","2c1f559470826beb","c75ef46d1d048906","7f69502a67b8c689"],"x":1859.142822265625,"y":918.7142333984375,"w":817,"h":178},{"id":"a9147df404c8a27b","type":"function","z":"b92be5062203ff69","g":"d1c0180fed82252c","name":"extract existing .tgz","func":"const extract = tarStream.extract()\n\nvar allFiles = [];\n\n/* \n * there is no indication in a tar file of whether a file is binary or textual.\n * we can only make a guess by the extension of the filename.\n ***/\nvar computeFormat = (filename) => {\n  var ext = filename.split(\".\").at(-1);\n\n  return {\n    \"html\": \"html\",\n    \"js\": \"javascript\",\n    \"md\": \"markdown\",\n    \"json\": \"json\",\n    /* binary formats are encoded in base64 */\n    \"png\":  \"base64\",\n    \"tiff\": \"base64\",\n    \"tif\":  \"base64\",\n    \"jpg\":  \"base64\",\n    \"jpeg\": \"base64\",\n    \"bin\":  \"base64\",\n    \"bmp\":  \"base64\",\n  }[ext.toLowerCase()] || \"text\";\n};\n\nextract.on('entry', function (header, stream, next) {\n  // header is the tar header\n  // stream is the content body (might be an empty stream)\n  // call next when you are done with this entry\n  \n  var buffer = [];\n  \n  stream.on('data', function (data) {\n    buffer.push(data)\n  });\n\n  stream.on('end', function () {\n    var frmt = computeFormat(header.name.split(\"/\").at(-1));\n\n    allFiles.push({\n      id: RED.util.generateId(),\n      type: \"PkgFile\",\n      name: header.name.split(\"/\").at(-1),\n      filename: header.name.replace(/^package\\//,''),\n      template: Buffer.concat(buffer).toString(frmt == \"base64\" ? 'base64' : 'utf8'),\n      syntax: \"mustache\",\n      format: frmt,\n      output: \"str\",\n      x: 100,\n      y: 50 * (allFiles.length+1),\n      wires: [\n        []\n      ]\n    })\n    \n    next() // ready for next entry\n  })\n\n  stream.resume() // just auto drain the stream\n})\n\nextract.on('finish', function () {\n  // all entries read, wire them together\n  for ( var idx = 0; idx < allFiles.length-1; idx++ ) {\n    allFiles[idx].wires = [[allFiles[idx+1].id]];\n  }\n  \n  msg.payload = JSON.stringify(allFiles);\n  node.send(msg)\n  node.done()\n})\n\nvar stream = streamx.Readable.from(Buffer.from(pakoGzip.inflate(new Uint8Array(msg.payload))))\nstream.pipe(extract);\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"tarStream","module":"tar-stream"},{"var":"pakoGzip","module":"pako"},{"var":"streamx","module":"streamx"}],"x":2337.1428756713867,"y":961.7143249511719,"wires":[["2c1f559470826beb"]]},{"id":"2c1f559470826beb","type":"ClientCode","z":"b92be5062203ff69","g":"d1c0180fed82252c","name":"Open import with content","clientcode":"RED.clipboard.import();\n\nsetTimeout(() => {\n    $('#red-ui-clipboard-dialog-import-text').val(\n        payload\n    ).trigger(\"paste\");\n}, 300);","format":"javascript","x":2540.142822265625,"y":1049.71435546875,"wires":[[]]},{"id":"c75ef46d1d048906","type":"file in","z":"b92be5062203ff69","g":"d1c0180fed82252c","name":"","filename":"/tmp/existing-package-0.0.1.tgz","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":2100.142822265625,"y":1055.7142333984375,"wires":[["a9147df404c8a27b"]]},{"id":"7f69502a67b8c689","type":"inject","z":"b92be5062203ff69","g":"d1c0180fed82252c","name":"Trigger","props":[],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":1955.142822265625,"y":959.7142333984375,"wires":[["c75ef46d1d048906"]]}]